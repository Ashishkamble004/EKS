1. Deploy the Metrics Server

    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.0/components.yaml
    kubectl get apiservice v1beta1.metrics.k8s.io -o json | jq '.status'

2. SCALE AN APPLICATION WITH HPA
    
   * Deploy a Sample App * 
    kubectl create deployment php-apache --image=us.gcr.io/k8s-artifacts-prod/hpa-example
    kubectl set resources deploy php-apache --requests=cpu=200m
    kubectl expose deploy php-apache --port 80
    kubectl get pod -l app=php-apache

3. Create an HPA resource

    kubectl autoscale deployment php-apache `#The target average CPU utilization` \
    --cpu-percent=50 \
    --min=1 `#The lower limit for the number of pods that can be set by the autoscaler` \
    --max=10 `#The upper limit for the number of pods that can be set by the autoscaler`

4. Generate load to trigger scaling

    kubectl run -i --tty load-generator --image=busybox /bin/sh
    while true; do wget -q -O - http://php-apache; done
    kubectl get hpa -w


