IRSA:
==================

Retrive Openid issuers for cluster:
----------------
aws eks describe-cluster --name eksworkshop-eksctl --query cluster.identity.oidc.issuer --output text

eksctl utils associate-iam-oidc-provider --cluster eksworkshop-eksctl --approve


aws iam list-policies --query 'Policies[?PolicyName==`AmazonS3ReadOnlyAccess`].Arn'


Create an SA:
--------------
eksctl create iamserviceaccount \
    --name iam-test \
    --namespace default \
    --cluster eksworkshop-eksctl \
    --attach-policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess \
    --approve \
    --override-existing-serviceaccounts

kubectl get sa iam-test

kubectl describe sa iam-test

mkdir ~/environment/irsa


LIST S3:
----------
cat <<EoF> ~/environment/irsa/job-s3.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: eks-iam-test-s3
spec:
  template:
    metadata:
      labels:
        app: eks-iam-test-s3
    spec:
      serviceAccountName: iam-test
      containers:
      - name: eks-iam-test
        image: amazon/aws-cli:latest
        args: ["s3", "ls"]
      restartPolicy: Never
EoF

kubectl apply -f ~/environment/irsa/job-s3.yaml


kubectl get job -l app=eks-iam-test-s3


kubectl logs -l app=eks-iam-test-s3


List ec2:
------------
cat <<EoF> ~/environment/irsa/job-ec2.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: eks-iam-test-ec2
spec:
  template:
    metadata:
      labels:
        app: eks-iam-test-ec2
    spec:
      serviceAccountName: iam-test
      containers:
      - name: eks-iam-test
        image: amazon/aws-cli:latest
        args: ["ec2", "describe-instances", "--region", "${AWS_REGION}"]
      restartPolicy: Never
  backoffLimit: 0
EoF

kubectl apply -f ~/environment/irsa/job-ec2.yaml

kubectl get job -l app=eks-iam-test-ec2


kubectl logs -l app=eks-iam-test-ec2

